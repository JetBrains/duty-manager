type Avatar {
    url: String
}

type Profile {
    avatar: Avatar
}

type Absence {
    available: Boolean!
    reason: String
    since: Date!
    till: Date!
}

scalar Date

enum Weekday {
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
    Sunday
}

type RegularDuty {
    weekday: Weekday!
    responsible: User
    backup: User
}

type Duty {
    date: Date!
    responsible: User
    backup: User
}

type User {
    id: ID!
    name: String!
    username: String!
    profile: Profile
    absences: [Absence!]!
    balance: Int
}

type Team {
    id: ID!
    users: [User!]!
}

type RegularDuties {
    id: ID!
    items: [RegularDuty!]!
}

type Duties {
    id: ID!
    items: [Duty!]!
}

type Query {
    me: User
    search(query: String): [User!]!
    team: Team!
    regularDuties: RegularDuties
    duties: Duties
}

input SetRegularDutyInput {
    weekday: Weekday!
    responsibleId: ID
    backupId: ID
}

input SetDutyInput {
    date: Date!
    responsibleId: ID
    backupId: ID
    prevResponsibleId: ID
    assignerId: ID
}

type SetDutyPayload {
    duties: Duties
    team: Team
}

type Mutation {
    addTeamMember(userId: ID!): Team
    removeTeamMember(userId: ID!): Team

    setRegularDuty(input: SetRegularDutyInput!): RegularDuties
    setDuty(input: SetDutyInput!): SetDutyPayload
}
